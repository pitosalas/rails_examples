<style>
  div.hidden {
    opacity:0;
  }
  div.shrunk {
    transform: scale(0);
  }
</style>

<h1>Ajax Demo Using Rails</h1>
<p>
This is a Rails application that will help you understand how to use Ajax with Rails. There are a few key things to understand.
</p><p>
The key is that if you add remote: true to a form or button, instead of requesting that a bit of html is returned, this will ask that a bit of Javascript is returned. So when you that, you need to look for the corresponding .js.erb file (vs. usually .html.erb). That little javascript program is returned to the client, who then executes it! 
</p>
<h2>2001: A Space Odyssey</h2>
<p>This is perhaps the greatest movie ever made. Ok, you might disagree. But here's a classic photo from the movie. 
<div id='thing' style="transition: all 1.0s;">
  <img src="https://nerdist.com/wp-content/uploads/2016/04/2001spaceodyssey_1.jpg", style="width: 75%;">
</div>
<h2>Ajax Buttons and links</h2>
Our examples will be a series of buttons and links, which use very simple ajax (and hence Javascript) to change the appearance of that great photograph.
<h3>Links</h3>
First links. Each of these links has a "remote: true" property. This means that instead of being sent off to another page, or adding  a record to a database, instead, they receive a snippet of Javascript, which is then executed, right here, in the browser.
<ul>
  <li><%= link_to("show", do_show_path, remote: true, method: :get) %></li><li>
  <%= link_to("hide", do_hide_path, remote: true, method: :post) %></li><li>
  <%= link_to("toggle", do_toggle_path, remote: true, method: :post) %></li>
</ul>

<h3>Buttons</h3>
We can play the same game with buttons. Same code is executed on the server and the same js code is returned to be run here on the client.

<ul><li><%= button_to("show", do_show_path, remote: true, method: :get) %></li><li>
<%= button_to("hide", do_hide_path, remote: true) %></li><li>
<%= button_to("toggle", do_toggle_path, remote: true) %></li>
</ul>

<h2> More interesting transitions!</h2>
But don't let your imagination be stifled. Here are some further experiments with other css tricks!

<ul>
<li><%= link_to("fadeout", do_fadeout_path, remote: true, method: :post) %></li><li>
<%= link_to("fadein", do_fadein_path, remote: true, method: :post) %></li><li>
<%= link_to("shrink", do_shrink_path, remote: true, method: :post) %></li><li>
<%= link_to("unshrink", do_unshrink_path, remote: true, method: :post) %></li></ul>
</ul>